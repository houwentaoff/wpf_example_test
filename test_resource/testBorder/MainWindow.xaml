<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" 
        x:Class="testBorder.MainWindow"
        Title="MainWindow" Height="350" Width="525" BorderThickness="10,0,0,0">
	<Window.Resources>
		
		<Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
			
            <!-- 为何这里将 {StaticResource ButtonNormalBackground} 改成Green会失效呢? 因为下面的controlTemplate 重新构造了视觉树么?-->
			<!-- 原因为:顶层已经对Background进行了赋值 优先级 -->
            <!--因为WPF每访问一个依赖属性，它都会按照下面的顺序由高到底处理该值。具体优先级如下图所示：
            
            -->
            <Setter Property="Background" Value="Red"/>
			
			
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<!-- Themes:ButtonChrom 理解为默认的button装饰器 -->
                        <!--
                        <Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderDefaulted="{TemplateBinding IsDefaulted}" SnapsToDevicePixels="true">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Themes:ButtonChrome>
                        -->
                        <!-- 我们用border 替换默认的buttonchrome-->
                        <Border CornerRadius="9" x:Name="bd" BorderThickness="10,0,0,0" BorderBrush="White" Background="{TemplateBinding Background}">
                        	<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
							    <!-- 为什么去掉targetName 就会失效呢?-->
                                <!-- 如果 TargetType未设置，则这里的Property 必须设置为button or control.Background ..-->
								<Setter TargetName="bd" Property="Button.Background" Value="White"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
							<Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="DataGridStyle1" TargetType="{x:Type DataGrid}">
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="BorderBrush" Value="#FF688CAF"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
			<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
			<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGrid}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
							<ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
								<ScrollViewer.Template>
									<ControlTemplate TargetType="{x:Type ScrollViewer}">
										<Grid>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto"/>
												<ColumnDefinition Width="*"/>
												<ColumnDefinition Width="Auto"/>
											</Grid.ColumnDefinitions>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto"/>
												<RowDefinition Height="*"/>
												<RowDefinition Height="Auto"/>
											</Grid.RowDefinitions>
											<Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
											<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
											<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
											<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
											<Grid Grid.Column="1" Grid.Row="2">
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
													<ColumnDefinition Width="*"/>
												</Grid.ColumnDefinitions>
												<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
											</Grid>
										</Grid>
									</ControlTemplate>
								</ScrollViewer.Template>
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</ScrollViewer>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsGrouping" Value="true"/>
						<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
					</MultiTrigger.Conditions>
					<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
				</MultiTrigger>
			</Style.Triggers>
		</Style>
		
	</Window.Resources>
	<Grid>
	    <!-- 采用资源字典中的样式 -->
		<Button Style="{StaticResource ButtonStyleFromResource}" Content="Button" HorizontalAlignment="Left" Height="77.6" Margin="45,52.2,0,0" VerticalAlignment="Top" Width="147.2"/>
        <!-- 采用本文件中的样式 -->
        <Button Content="Button" HorizontalAlignment="Left" Height="92.8" Margin="233.867,37,0,0" VerticalAlignment="Top" Width="147.2"  BorderThickness="50,0,0,0" BorderBrush="Black" Style="{StaticResource ButtonStyle1}" Foreground="White"  />
		
		<Border Background="Black" Margin="130.8,134.8,135.6,74.4" BorderBrush="#FFD61919" BorderThickness="0,10,0,0">
			 <!-- 采用本文件中的样式 -->
            <Button Content="Button" HorizontalAlignment="Left" Height="92.8" Margin="35.467,0,0,0" VerticalAlignment="Top" Width="147.2" Background="#FF1C60DE" BorderThickness="50,0,0,0" BorderBrush="Black" Style="{StaticResource ButtonStyle1}" Foreground="White"  />
		</Border>
         <Grid Margin="260.4,252.6,0,0" Background="#FF191816">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition></ColumnDefinition>
                                                        <ColumnDefinition></ColumnDefinition>
                                                    </Grid.ColumnDefinitions>
                                                    <Image Grid.Column="0" Source="favicon.ico" ></Image>
                                                    <TextBlock Grid.Column="1" Text="dasdadsadd" Foreground="White" VerticalAlignment="Center"/>
                                                </Grid>
         <DataGrid HorizontalAlignment="Left" Height="125.8" Margin="420,52.2,0,0" VerticalAlignment="Top" Width="43.2" Style="{DynamicResource DataGridStyle1}"/>
	</Grid>
</Window>
